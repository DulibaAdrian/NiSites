package rest.controllers;

import java.util.HashSet;
import java.util.List;
import java.util.UUID;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;
import Mapper.ModelMapperConfigurations;
import business.DTO.PageDTO;
import business.DTO.SiteDTO;
import business.DTO.UserDTO;
import entities.domain.User;
import repository.interfaces.IUserRepository;

@RestController
@RequestMapping("/api/user")
public class UserController {

	@Autowired
	private IUserRepository userRepository;

	@RequestMapping(value = "/", method = RequestMethod.GET, produces = { MediaType.APPLICATION_JSON_VALUE })
	public List<UserDTO> getUserList() {
		List<User> userList = userRepository.findAll();
		List<UserDTO> userListDTO = ModelMapperConfigurations.mapAll(userList, UserDTO.class);
		for (int i = 0; i < userListDTO.size(); i++) {
			mapUserHelper(userListDTO.get(i), userList.get(i));
		}
		return userListDTO;
	}

	@RequestMapping(value = "/{userId}", method = RequestMethod.GET, produces = { MediaType.APPLICATION_JSON_VALUE })
	public UserDTO getUserById(@PathVariable UUID userId) {
		User user = userRepository.findOne(userId);
		UserDTO userDTO = ModelMapperConfigurations.map(user, UserDTO.class);
		mapUserHelper(userDTO, user);
		return userDTO;
	}

	@RequestMapping(value = "/", method = RequestMethod.POST)
	public void addUser(@RequestBody UserDTO userDTO) {
		User user = ModelMapperConfigurations.map(userDTO, User.class);
		this.userRepository.save(user);
	}

	@RequestMapping(value = "/{userId}", method = RequestMethod.PUT)
	public void editUser(@PathVariable UUID userId, @RequestBody UserDTO user) {
		User userToUpdate = this.userRepository.findOne(userId);
		User userToUpdate = ModelMapperConfigurations.map(userDTO, User.class);

		this.userRepository.save(userToUpdate);
	}

	private void mapUserHelper(UserDTO userDTO, User user) {
		userDTO.setSites(new HashSet<SiteDTO>(ModelMapperConfigurations.mapAll(user.getSiteList(), SiteDTO.class)));
		for (SiteDTO site : userDTO.getSites()) {
			site.setUserList(new HashSet<UserDTO>());
		}
		for (SiteDTO site : userDTO.getSites()) {
			for (PageDTO page : site.getPageList()) {
				page.setSite(null);
			}
		}
	}
}
