package rest.controllers;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;
import Mapper.ModelMapperConfigurations;
import dto.SiteDTO;
import entities.domain.Page;
import entities.domain.Site;
import entities.domain.User;
import repository.interfaces.IPageRepository;
import repository.interfaces.ISiteRepository;
import repository.interfaces.IUserRepository;

@RestController
@RequestMapping("/api/repository/site")
public class SiteController {

	@Autowired
	private ISiteRepository siteRepository;
	@Autowired
	private IPageRepository pageRepository;
	@Autowired
	private IUserRepository userRepository;

	@RequestMapping(value = "/{userId}", method = RequestMethod.GET, produces = { MediaType.APPLICATION_JSON_VALUE })
	public List<SiteDTO> getSitesList(@PathVariable UUID userId) {
		List<Site> siteList = this.siteRepository.findAll();
		List<SiteDTO> siteListDTO=new ArrayList<>();
		for (Site site: siteList) {
			for(User user : siteList.get(i).getUserList()){
				if(user.getId().equals(userId)){
					siteListDTO.add(e)
				}
			}
			if (!siteList.get(i).getUserList().contains(userRepository.getOne(userId))) {
				siteList.remove(i);
			}
		}
		List<SiteDTO> siteListDTO = ModelMapperConfigurations.mapAll(siteList, SiteDTO.class);
		for (int i = 0; i < siteListDTO.size(); i++) {
			ModelMapperConfigurations.mapSiteHelper(siteListDTO.get(i), siteList.get(i));
		}
		return siteListDTO;
	}

	@RequestMapping(value = "/", method = RequestMethod.GET, produces = { MediaType.APPLICATION_JSON_VALUE })
	public List<SiteDTO> getAllSites() {
		List<Site> siteList = this.siteRepository.findAll();
		List<SiteDTO> siteListDTO = ModelMapperConfigurations.mapAll(siteList, SiteDTO.class);
		for (int i = 0; i < siteListDTO.size(); i++) {
			ModelMapperConfigurations.mapSiteHelper(siteListDTO.get(i), siteList.get(i));
		}
		return siteListDTO;
	}

	@RequestMapping(value = "/{userId}", method = RequestMethod.POST)
	public void addSite(@PathVariable UUID userId, @RequestBody SiteDTO siteDTO) {
		Page homePage = new Page();
		homePage.setPageName("<header>HomePage</header>");
		homePage.setContent("<body>Deafult body</body>");
		Site site = ModelMapperConfigurations.map(siteDTO, Site.class);
		homePage.setSite(site);
		User user = this.userRepository.findOne(userId);
		user.getSiteList().add(site);
		site.getPageList().add(homePage);
		site.getUserList().add(user);
		this.pageRepository.save(homePage);
	}

	@RequestMapping(value = "/getSiteById/{siteId}", method = RequestMethod.GET, produces = {
			MediaType.APPLICATION_JSON_VALUE })
	public SiteDTO getSiteById(@PathVariable UUID siteId) {
		Site site = this.siteRepository.findOne(siteId);
		if (site == null) {
			return null;
		}
		SiteDTO siteDTO = new SiteDTO();
		siteDTO = ModelMapperConfigurations.map(site, SiteDTO.class);
		ModelMapperConfigurations.mapSiteHelper(siteDTO, site);
		return siteDTO;
	}

	@RequestMapping(value = "/{siteId}", method = RequestMethod.DELETE)
	public void deleteSite(@PathVariable UUID siteId) {
		Site site = siteRepository.getOne(siteId);
		site.setDeleted(true);
		this.siteRepository.save(site);
	}

	@RequestMapping(value = "/{siteId}", method = RequestMethod.PUT)
	public void editSite(@PathVariable UUID siteId, @RequestBody SiteDTO newSite) {
		Site site = this.siteRepository.findOne(siteId);
		if (site == null) {
			return;
		}
		ModelMapperConfigurations.mapSiteHelper(newSite, site);
		site.setId(siteId);
		this.siteRepository.save(site);
	}
}
