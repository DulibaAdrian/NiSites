package business;

import java.util.Properties;
import java.util.UUID;
import java.util.*;
import javax.mail.*;
import javax.mail.internet.*;
import javax.activation.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;
import javax.mail.MessagingException;
import javax.mail.internet.MimeMessage;
import dto.UserDTO;
import org.springframework.mail.javamail.JavaMailSender;
@RestController
@RequestMapping("/api/business/user")
public class UserLogic {
	
    private JavaMailSender javaMailSender;
	
	String userUrl = "http://localhost:8080/api/repository/user/";
	RestTemplate restTemplate = new RestTemplate();

	@RequestMapping(value = "/", method = RequestMethod.GET, produces = { MediaType.APPLICATION_JSON_VALUE })
	public UserDTO[] getUserList() {
		UserDTO[] listUsers = this.restTemplate.getForObject(this.userUrl, UserDTO[].class);
		return listUsers;
	}

	@RequestMapping(value = "/", method = RequestMethod.POST)
	public void addUser(@RequestBody UserDTO userDTO) {
		this.restTemplate.postForEntity(this.userUrl, userDTO, UserDTO.class);
	}

	@RequestMapping(value = "/", method = RequestMethod.PUT)
	public void editUser(@RequestBody UserDTO userDTO) {
		this.restTemplate.put(this.userUrl, userDTO, UserDTO.class);
	}

	@RequestMapping(value = "/{userId}", method = RequestMethod.GET, produces = { MediaType.APPLICATION_JSON_VALUE })
	public UserDTO getUserById(@PathVariable UUID userId) {
		UserDTO userDTO = this.restTemplate.getForObject(this.userUrl + userId.toString(), UserDTO.class);
		return userDTO;
	}

	@RequestMapping(value = "/email/{email}", method = RequestMethod.GET, produces = {
			MediaType.APPLICATION_JSON_VALUE })
	public UserDTO getUserByEmail(@PathVariable String email) {
		UserDTO userDTO = this.restTemplate.getForObject(this.userUrl + "email/" + email, UserDTO.class);
		return userDTO;
	}

	@RequestMapping(value = "/name/{userName}", method = RequestMethod.GET, produces = {
			MediaType.APPLICATION_JSON_VALUE })
	public UserDTO getUserByName(@PathVariable String userName) {
		UserDTO userDTO = this.restTemplate.getForObject(this.userUrl + "name/" + userName, UserDTO.class);
		return userDTO;
	}

	@RequestMapping(value = "/email/{email}/password/{password}", method = RequestMethod.GET, produces = {
			MediaType.APPLICATION_JSON_VALUE })
	public UserDTO getUserByEmailAndPassword(@PathVariable String email, @PathVariable String password) {
		UserDTO userDTO = this.restTemplate.getForObject(this.userUrl + "email/" + email + "/password/" + password,
				UserDTO.class);
		return userDTO;
	}

	public static void sendEmail(Session session, String toEmail, String subject, String body){
		try
	    {
	      MimeMessage msg = new MimeMessage(session);
	      //set message headers
	      msg.addHeader("Content-type", "text/HTML; charset=UTF-8");
	      msg.addHeader("format", "flowed");
	      msg.addHeader("Content-Transfer-Encoding", "8bit");

	      msg.setFrom(new InternetAddress("no_reply@example.com", "NoReply-JD"));

	      msg.setReplyTo(InternetAddress.parse("no_reply@example.com", false));

	      msg.setSubject(subject, "UTF-8");

	      msg.setText(body, "UTF-8");

	      msg.setSentDate(new Date());

	      msg.setRecipients(Message.RecipientType.TO, InternetAddress.parse(toEmail, false));
	      System.out.println("Message is ready");
    	  Transport.send(msg);  

	      System.out.println("EMail Sent Successfully!!");
	    }
	    catch (Exception e) {
	      e.printStackTrace();
	    }
	}
	
	@RequestMapping(value = "/sendMail", method = RequestMethod.GET, produces = {
			MediaType.APPLICATION_JSON_VALUE })

	private void sendEmail(){
		 String smtpHostServer = "smtp.example.com";
		    String emailID = "email_me@example.com";
		    
		    Properties props = System.getProperties();

		    props.put("mail.smtp.host", smtpHostServer);

		    Session session = Session.getInstance(props, null);
		    
		    sendEmail(session, emailID,"SimpleEmail Testing Subject", "SimpleEmail Testing Body");
	}
}
