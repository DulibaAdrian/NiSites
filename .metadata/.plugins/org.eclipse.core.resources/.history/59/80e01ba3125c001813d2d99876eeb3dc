package business;

import java.util.HashSet;
import java.util.Set;
import java.util.UUID;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;
import dto.PageDTO;
import dto.SiteDTO;

@RestController
@RequestMapping("/api/business/page")
public class PageLogic {

	String pageUrl = "http://localhost:8080/api/repository/page/";
	String siteUrl = "http://localhost:8080/api/repository/site/";

	RestTemplate restTemplate = new RestTemplate();

	@RequestMapping(value = "/{siteId}", method = RequestMethod.POST)
	public void addPage(@PathVariable UUID siteId, @RequestBody PageDTO pageDTO) {

		if (pageDTO.getContent() == null) {
			pageDTO.setContent("<!DOCTYPE html><html><head>"
					+ "Default header</head><body>"
					+ "Default body</body></html>");
		}
		this.restTemplate.postForEntity(this.pageUrl + siteId.toString(), pageDTO, PageDTO.class);
	}

	@RequestMapping(value = "/{siteId}", method = RequestMethod.GET, produces = { MediaType.APPLICATION_JSON_VALUE })
	public Set<PageDTO> getPagesBySite(@PathVariable UUID siteId) {
		SiteDTO siteDTO = this.restTemplate.getForObject(this.siteUrl + "getSiteById/" + siteId.toString(),
				SiteDTO.class);
		Set<PageDTO> pages = new HashSet<PageDTO>();
		for (PageDTO page : siteDTO.getPageList()) {
			if (page.isDeleted() == false) {
				pages.add(page);
			}
		}
		return pages;
	}

	@RequestMapping(value = "/getPageById/{pageId}", method = RequestMethod.GET, produces = {
			MediaType.APPLICATION_JSON_VALUE })
	public PageDTO getPageById(@PathVariable UUID pageId) {
		PageDTO pageDTO = this.restTemplate.getForObject(this.pageUrl + "getPageById/" + pageId.toString(),
				PageDTO.class);
		return pageDTO;
	}
	
	@RequestMapping(value = "/{pageId}", method = RequestMethod.DELETE)
	public void deletePage(@PathVariable UUID pageId) {
		this.restTemplate.delete(this.pageUrl + pageId.toString());
	}

	@RequestMapping(value = "/{pageId}", method = RequestMethod.PUT)
	public void editPage(@PathVariable UUID pageId, @RequestBody PageDTO pageDTO) {
		this.restTemplate.put(this.pageUrl + pageId.toString(), pageDTO, PageDTO.class);
	}
}
