package Mapper;

import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.stream.Collectors;

import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;

import business.DTO.PageDTO;
import business.DTO.SiteDTO;
import business.DTO.UserDTO;
import entities.domain.User;

public class ModelMapperConfigurations {

	private static ModelMapper modelMapper = new ModelMapper();

	static {
		modelMapper = new ModelMapper();
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}

	private ModelMapperConfigurations() {
	}
	
	public static void mapUserHelper(UserDTO userDTO, User user) {
		userDTO.setSites(new HashSet<SiteDTO>(ModelMapperConfigurations.mapAll(user.getSiteList(), SiteDTO.class)));
		for (SiteDTO site : userDTO.getSites()) {
			site.setUserList(new HashSet<UserDTO>());
		}
		for (SiteDTO site : userDTO.getSites()) {
			for (PageDTO page : site.getPageList()) {
				page.setSite(null);
			}
		}
	}
	public static <D, T> D map(final T entity, Class<D> outClass) {
		return modelMapper.map(entity, outClass);
	}

	public static <D, T> List<D> mapAll(final Collection<T> entityList, Class<D> outCLass) {
		return entityList.stream().map(entity -> map(entity, outCLass)).collect(Collectors.toList());
	}

	public static <S, D> D map(final S source, D destination) {
		modelMapper.map(source, destination);
		return destination;
	}
}
