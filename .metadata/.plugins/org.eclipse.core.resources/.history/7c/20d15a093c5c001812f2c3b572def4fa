package rest.controllers;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;
import Mapper.ModelMapperConfigurations;
import dto.PageDTO;
import entities.domain.Page;
import entities.domain.Site;
import repository.interfaces.IPageRepository;
import repository.interfaces.ISiteRepository;

@RestController
@RequestMapping("/api/repository/page")
public class PageController {

	@Autowired
	private IPageRepository pageRepository;
	@Autowired
	private ISiteRepository siteRepository;

	@RequestMapping(value = "/", method = RequestMethod.GET)
	public List<PageDTO> getPagesList() {
		List<Page> pageList = this.pageRepository.findAll();
		List<PageDTO> pageListDTO = new ArrayList<>();
		for (int i = 0; i < pageList.size(); i++) {
			pageListDTO.add(ModelMapperConfigurations.mapPageHelper(pageList.get(i)));
		}
		return pageListDTO;
	}

	@RequestMapping(value = "/getPageById/{pageId}", method = RequestMethod.GET)
	public PageDTO getPageById(@PathVariable UUID pageId) {
		Page page = pageRepository.findOne(pageId);
		PageDTO pageDTO = ModelMapperConfigurations.mapPageHelper(page);
		return pageDTO;
	}

	@RequestMapping(value = "/{siteId}", method = RequestMethod.POST)
	public void addPage(@PathVariable UUID siteId, @RequestBody PageDTO pageDTO) {
		Site site = this.siteRepository.findOne(siteId);
		Page page = ModelMapperConfigurations.map(pageDTO, Page.class);
		site.getPageList().add(page);
		page.setSite(site);
		this.pageRepository.save(page);
	}

	@RequestMapping(value = "/{pageId}", method = RequestMethod.DELETE)
	public void deletePage(@PathVariable UUID pageId) {
		Page page = this.pageRepository.getOne(pageId);
		page.setDeleted(true);
		this.pageRepository.save(page);	}

	@RequestMapping(value = "/editPageContent/{pageId}", method = RequestMethod.PUT)
	public void editPageContent(@PathVariable UUID pageId, @RequestBody String pageConetnt) {
		Page page = this.pageRepository.getOne(pageId);
		if (page == null) {
			return;
		}
		page.setContent(pageConetnt);
		this.pageRepository.save(page);
	}
	
	@RequestMapping(value = "/editPageContent/{pageId}", method = RequestMethod.PUT)
	public void editPageHeader(@PathVariable UUID pageId, @RequestBody String pageConetnt) {
		Page page = this.pageRepository.getOne(pageId);
		if (page == null) {
			return;
		}
		page.setContent(pageConetnt);
		this.pageRepository.save(page);
	}
}
