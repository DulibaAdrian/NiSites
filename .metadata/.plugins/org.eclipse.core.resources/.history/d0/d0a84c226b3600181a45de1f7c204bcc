package rest.controllers;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.UUID;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import Mapper.ModelMapperConfigurations;
import business.DTO.PageDTO;
import business.DTO.SiteDTO;
import business.DTO.UserDTO;
import entities.domain.Site;
import entities.domain.User;
import repository.interfaces.IUserRepository;

@RestController
@RequestMapping("/api/user")
public class UserController {

	@Autowired
	private IUserRepository userRepository;

	@RequestMapping(value = "/", method = RequestMethod.GET, produces = { MediaType.APPLICATION_JSON_VALUE })
	public List<UserDTO> getUserList() {
		List<User> userList = userRepository.findAll();
		List<UserDTO> userListDTO = ModelMapperConfigurations.mapAll(userList, UserDTO.class);
		for(int i=0;i<userListDTO.size();i++){
			userListDTO.get(i).setSites(new HashSet<SiteDTO>(ModelMapperConfigurations.mapAll(userList.get(i).getSiteList(), SiteDTO.class)));
			for(SiteDTO site:userListDTO.get(i).getSites()){
				site.setUserList(new HashSet<UserDTO>());
			}
			for(SiteDTO site:userListDTO.get(i).getSites()){
				for(PageDTO page:site.getPageList()){
					page.setSite(null);
				}
			}
		}
		return userListDTO;
	}

	@RequestMapping(value = "/{userId}", method = RequestMethod.GET, produces = { MediaType.APPLICATION_JSON_VALUE })
	public User getUserById(@PathVariable UUID userId) {
		return this.userRepository.findOne(userId);
	}

	@RequestMapping(value = "/", method = RequestMethod.POST)
	public void addUser(@RequestBody UserDTO userDTO) {
		this.userRepository.save(user);
	}

	@RequestMapping(value = "/{userId}", method = RequestMethod.PUT)
	public void editUser(@PathVariable UUID userId, @RequestBody User user) {
		User userToUpdate = this.userRepository.findOne(userId);
		userToUpdate.setEmail(user.getEmail());
		userToUpdate.setName(user.getName());
		userToUpdate.setPassword(user.getPassword());
		this.userRepository.save(userToUpdate);
	}
}
